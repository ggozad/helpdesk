import queryString from 'querystring'

/**
 * API error data.
 *
 * This error type is used for runtime errors generated by the API service.
 */
export class ApiError extends Error {
  /**
   * @param {string} message
   * @param {any} data
   */
  constructor(message, data = {}) {
    // const trueProto = new.target.prototype
    super(message)
    // Object.setPrototypeOf(this, trueProto)
    const { error, ...other } = data
    this.error = error
    this.data = other
    this.apiError = true
  }
}

/** @typedef {{[key: string]: string | number | null}} QueryParameters */

/**
 * This is a basic wrapper around the Helpdesk API.
 *
 * It handles a few basic things:
 * - it exposes a Promise API for all interactions
 * - errors are also raised as ApiError exceptions
 * - it will automatically detect and decode JSON responses
 */
export class Api {
  /**
   *
   * @param {string} baseUrl Root URL for the API
   */
  constructor(baseUrl) {
    this.baseUrl = baseUrl
  }

  /**
   * Send DELETE request to the API
   *
   * @param {string} path URL resource path (relative to API root)
   * @param {QueryParameters} params Query parameters
   */
  delete(path, params = {}) {
    return this.query('DELETE', path, params)
  }

  /**
   * GET data from the API
   *
   * @param {string} path URL resource path (relative to API root)
   * @param {QueryParameters} params Query parameters
   */
  get(path, params = {}) {
    return this.query('GET', path, params)
  }

  /**
   * Send PATCH request with JSON data to the API, and return response data
   *
   * @param {string} path URL resource path (relative to API root)
   * @param {any} data Data to pass to the server.
   * @param {QueryParameters} params Query parameters
   */
  patch(path, data, params = {}) {
    return this.query('PATCH', path, params, data)
  }

  /**
   * Post JSON data to the API, and return response data
   *
   * @param {string} path URL resource path (relative to API root)
   * @param {any} data Data to pass to the server.
   * @param {QueryParameters} params Query parameters
   */
  post(path, data, params = {}) {
    return this.query('POST', path, params, data)
  }

  /**
   * PUT JSON data to the API, and return response data
   *
   * @param {string} path URL resource path (relative to API root)
   * @param {any} data Data to pass to the server.
   * @param {QueryParameters} params Query parameters
   */
  put(path, data, params = {}) {
    return this.query('PUT', path, params, data)
  }

  /**
   * Low-level method to send request to API.
   *
   * This method should normally not be used by callers. Instead use
   * one of the get/post/put/delete/patch methods.
   *
   * @param {'GET'|'POST'|'DELETE'|'PUT'|'PATCH} method HTTP method
   * @param {string} path URL resource path (relative to API root)
   * @param {QueryParameters} params Query parameters
   * @param {any} data Data to pass to the server.
   */

  async query(method, path, params, data) {
    let url = `${this.baseUrl}${path}`
    const qs = queryString.stringify(params)
    if (qs.length > 0) {
      url += `?${qs}`
    }
    const options = {
      credentials: 'include',
      method,
    }

    if (data) {
      options.headers = { 'Content-Type': 'application/json' }
      options.body = JSON.stringify(data)
    }
    const r = await fetch(url, options)

    if (r.status === 204) {
      return null
    }

    let response
    if (r.headers.get('Content-Type') === 'application/json') {
      response = await r.json()
    } else {
      response = await r.text()
    }
    if (!r.ok) {
      throw new ApiError(r.statusText, response)
    }
    return response
  }
}
